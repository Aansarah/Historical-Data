# -*- coding: utf-8 -*-
"""Historical_prices.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1uRl6N_PNIkAb2cEYoXKQzA96gyY16m_k
"""

from google.colab import drive
drive.mount('/content/drive')

#Importing Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the data
data = pd.read_csv("/content/drive/MyDrive/final project/historical_prices_.csv")


# Data Preprocessing
# Convert 'Date' to datetime format
df['Date'] = pd.to_datetime(df['Date'])
# Sort data by date
df.sort_values('Date', inplace=True)
# Set 'Date' as index
df.set_index('Date', inplace=True)

# Handle missing values
# Assuming 'Close' is the main column of interest, fill missing values with the previous value
df['Close'].fillna(method='ffill', inplace=True)

# Calculate daily percentage change
df['Daily Change %'] = df['Close'].pct_change() * 100

df.head()

### Step 2: Analytical Techniques
#Now that the data is preprocessed, I will proceed with the analytical techniques:

#1. **Trend Analysis**: Calculate moving averages (20-day and 50-day) to identify trends.
#2. **Volatility Analysis**: Calculate Bollinger Bands and the Relative Strength Index (RSI) to assess volatility.

#Let's calculate the moving averages first.

# Calculate moving averages
df['MA20'] = df['Close'].rolling(window=20).mean()
df['MA50'] = df['Close'].rolling(window=50).mean()

df[['Close', 'MA20', 'MA50']].head(25)

#Now, let's calculate the Relative Strength Index (RSI) to further assess volatility.

def calculate_rsi(data, window=14):
    delta = data['Close'].diff(1)
    gain = (delta.where(delta > 0, 0)).rolling(window=window).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=window).mean()
    rs = gain / loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# Calculate RSI
df['RSI'] = calculate_rsi(df)

df[['Close', 'RSI']].head(25)

import matplotlib.dates as mdates

# Line Chart with Moving Averages
plt.figure(figsize=(14, 7))
plt.plot(df.index, df['Close'], label='Close Price', color='blue', alpha=0.5)
plt.plot(df.index, df['MA20'], label='20-Day MA', color='red', linestyle='--')
plt.plot(df.index, df['MA50'], label='50-Day MA', color='green', linestyle='--')

plt.title('GBP/USD Exchange Rate with Moving Averages')
plt.xlabel('Date')
plt.ylabel('Exchange Rate')
plt.legend()
plt.grid(True)
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Bollinger Bands
plt.figure(figsize=(14, 7))
plt.plot(df.index, df['Close'], label='Close Price', color='blue', alpha=0.5)
plt.plot(df.index, df['BB_upper'], label='Upper Bollinger Band', color='red', linestyle='--')
plt.plot(df.index, df['BB_lower'], label='Lower Bollinger Band', color='green', linestyle='--')

plt.fill_between(df.index, df['BB_upper'], df['BB_lower'], color='gray', alpha=0.2)

plt.title('GBP/USD Exchange Rate with Bollinger Bands')
plt.xlabel('Date')
plt.ylabel('Exchange Rate')
plt.legend()
plt.grid(True)
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Relative Strength Index (RSI)
plt.figure(figsize=(14, 7))
plt.plot(df.index, df['RSI'], label='RSI', color='purple')
plt.axhline(70, linestyle='--', alpha=0.5, color='red')
plt.axhline(30, linestyle='--', alpha=0.5, color='green')

plt.title('GBP/USD Relative Strength Index (RSI)')
plt.xlabel('Date')
plt.ylabel('RSI')
plt.legend()
plt.grid(True)
plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%Y-%m'))
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Histogram of Daily Percentage Changes
plt.figure(figsize=(10, 6))
plt.hist(df['Daily Change %'].dropna(), bins=50, color='blue', alpha=0.7)

plt.title('Histogram of Daily Percentage Changes in GBP/USD')
plt.xlabel('Daily Percentage Change (%)')
plt.ylabel('Frequency')
plt.grid(True)
plt.tight_layout()
plt.show()
